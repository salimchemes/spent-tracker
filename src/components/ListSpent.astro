---
import { supabase } from "../lib/supabase";
import "../styles/toaster.css";

const { data } = await supabase
  .from("expenses")
  .select("*")
  .order("id", { ascending: false });

const spentItems = data?.map((item) => ({
  id: item.id,
  date: item.date,
  category: item.category,
  amount: item.amount,
  paymentType: item.payment_type,
  createdBy: item.created_by,
  notes: item.notes,
}));
const totalAmount =
  spentItems?.reduce((acc, curr) => acc + curr.amount, 0) || 0;
---

<div
  class="max-w-5xl mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"
>
  <div class="mt-4">
    <h2 class="text-lg font-bold text-gray-800 dark:text-gray-200">
      Total: $<span id="total">{totalAmount.toFixed(2)}</span>
    </h2>
  </div>
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
      <thead class="bg-gray-50 dark:bg-gray-700">
        <tr>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Date</th
          >
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Category</th
          >
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Amount</th
          >
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Payment Type</th
          >
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Created By</th
          >

          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Notes</th
          >
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider"
            >Actions</th
          >
        </tr>
      </thead>
      <tbody
        class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700"
      >
        {
          !spentItems || spentItems.length === 0 ? (
            // if no records show no records added yet in a
            <tr>
              <td
                colspan="6"
                class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 text-center"
              >
                No records added yet
              </td>
            </tr>
          ) : (
            spentItems?.map((item) => (
              <tr id={`tr-${item.id}`}>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                  {item.date}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                  {item.category}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                  ${item.amount.toFixed(2)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 capitalize">
                  {item.paymentType}
                </td>{" "}
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 capitalize">
                  {item.createdBy}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 capitalize">
                  {item.notes}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 flex space-x-2">
                  {/* <button class="edit-btn text-blue-600 hover:text-blue-900" data-id={item.id}>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828zM4 12v4h4l10-10-4-4L4 12z" />
                                </svg>
                            </button> */}
                  <button
                    class="remove-btn text-blue-600 hover:text-blue-900"
                    data-id={item.id}
                    data-amount={item.amount}
                    data-items={spentItems}
                  >
                    Remove
                  </button>
                </td>
              </tr>
            ))
          )
        }
      </tbody>
    </table>
  </div>

  <!-- Display Total Amount -->
</div>
<div id="toaster" class="toaster"></div>
<script>
  import { showToaster } from "../utils/toaster.js";

  document.querySelectorAll(".edit-btn").forEach((button) => {
    button.addEventListener("click", (e) => {
      const id = (e.currentTarget as HTMLElement)?.getAttribute("data-id");
      if (id) {
        handleEdit(Number(id));
      }
    });
  });

  document.querySelectorAll(".remove-btn").forEach((button) => {
    button.addEventListener("click", (e) => {
      const id = (e.currentTarget as HTMLElement)?.getAttribute("data-id");
      const amount = (e.currentTarget as HTMLElement)?.getAttribute(
        "data-amount"
      );
      handleRemove(Number(id), Number(amount));
    });
  });

  function handleEdit(id: number): void {
    console.log(`Edit item with id: ${id}`);
    // Implement edit functionality here
  }

  async function handleRemove(id: number, amount: number) {
    const response = await fetch("/api/expenses", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ id }),
    });
    if (response.ok) {
      const tr = document.getElementById(`tr-${id}`);
      if (tr) {
        tr.remove();
        const totalElement = document.getElementById("total") as HTMLElement;
        if (totalElement) {
          const total = Number(totalElement.innerText) - amount;
          totalElement.innerHTML = total.toString();
          showToaster("Item removed successfully");
        }
      }
    } else {
      showToaster("Error removing item", false);
    }
  }
</script>
<style>
  td {
    text-transform: capitalize;
  }
  .toaster {
    position: fixed;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    padding: 1rem;
    border-radius: 4px;
    background-color: #4caf50;
    color: white;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .toaster.show {
    opacity: 1;
  }
</style>
